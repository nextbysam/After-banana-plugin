// Video Layer Utilities
// Single responsibility: Handle video layer creation and management
function createVideoUtils() {

    function downloadVideoFile(videoUrl, destinationPath) {
        try {
            // Note: ExtendScript has limited download capabilities
            // In a real implementation, you would use system commands or external tools
            // For now, we simulate the download process

            var videoFile = new File(destinationPath);
            return {
                success: true,
                file: videoFile,
                message: "Video would be downloaded from: " + videoUrl + " to: " + destinationPath
            };

        } catch (error) {
            return {
                success: false,
                error: error.toString()
            };
        }
    }

    function getProjectFolder() {
        var project = app.project;
        if (project.file) {
            return project.file.parent;
        }

        // If project not saved, use desktop
        var desktop = Folder.desktop;
        return new Folder(desktop.fsName + "/AE_Generated_Videos");
    }

    function createUniqueFileName(baseName, extension) {
        var timestamp = new Date().getTime();
        return baseName + "_" + timestamp + "." + extension;
    }

    return {
        // Import video into project
        importVideo: function(videoUrl, fileName) {
            try {
                var projectFolder = getProjectFolder();
                if (!projectFolder.exists) {
                    projectFolder.create();
                }

                var uniqueFileName = fileName || createUniqueFileName("fal_generated_video", "mp4");
                var videoPath = projectFolder.fsName + "/" + uniqueFileName;

                // Download video file (simulated)
                var downloadResult = downloadVideoFile(videoUrl, videoPath);

                if (!downloadResult.success) {
                    throw new Error(downloadResult.error);
                }

                // In a real implementation, you would import the actual downloaded file
                // For now, we create a placeholder or solid
                var comp = app.project.activeItem;
                if (!comp || !(comp instanceof CompItem)) {
                    throw new Error("No active composition");
                }

                // Create a placeholder solid to represent the video
                var videoLayer = comp.layers.addSolid([0.2, 0.2, 0.8], "Generated Video: " + uniqueFileName, comp.width, comp.height, comp.pixelAspect);
                videoLayer.startTime = 0;

                // Add expression or marker to indicate this is a generated video
                videoLayer.comment = "Generated by FAL AI Veo3\nOriginal URL: " + videoUrl;

                return {
                    success: true,
                    layer: videoLayer,
                    file: downloadResult.file,
                    message: "Video layer created successfully"
                };

            } catch (error) {
                return {
                    success: false,
                    error: error.toString()
                };
            }
        },

        // Create video layer from URL
        createVideoLayer: function(videoUrl, layerName, comp) {
            comp = comp || app.project.activeItem;

            if (!comp || !(comp instanceof CompItem)) {
                throw new Error("No active composition");
            }

            try {
                var importResult = this.importVideo(videoUrl, layerName);

                if (!importResult.success) {
                    throw new Error(importResult.error);
                }

                return importResult.layer;

            } catch (error) {
                throw error;
            }
        },

        // Get video layer properties
        getVideoLayerInfo: function(layer) {
            return {
                name: layer.name,
                index: layer.index,
                duration: layer.outPoint - layer.inPoint,
                startTime: layer.startTime,
                comment: layer.comment,
                enabled: layer.enabled
            };
        }
    };
}